name: Meta Build Workflow

on:
  workflow_dispatch:
    inputs:
      # The repository and branch you want to build from
      targetRepo:
        description: "OWNER/REPO that actually contains Dockerfiles"
        required: true
        default: "vmelikyan/lc-test" # Example: actual code repo
      targetBranch:
        description: "Branch or ref in that targetRepo"
        required: true
        default: "main"

      # JSON describing multiple services (name, dockerfile, tag, etc.)
      buildConfig:
        description: "JSON describing services to build & push"
        required: true

jobs:
  parse-config:
    name: Parse Build Config
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.parse.outputs.services }}

    steps:
      - name: Checkout orchestrator (lc-test-4) repo (optional)
        uses: actions/checkout@v3

      - name: Parse buildConfig
        id: parse
        run: |
          echo "${{ github.event.inputs.buildConfig }}" > buildConfig.json

          echo "== buildConfig.json =="
          cat buildConfig.json

          # Extract .services array into an output for the next job
          SERVICES_JSON=$(jq -c '.services' buildConfig.json)
          echo "::set-output name=services::$SERVICES_JSON"

  build-images:
    name: Build & Push Images
    needs: parse-config
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.parse-config.outputs.services) }}

    steps:
      - name: Check out target repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.targetRepo }}
          ref: ${{ github.event.inputs.targetBranch }}
          path: target-repo
          # If this targetRepo is private, add:
          # token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-west-2 # or your preferred region

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Docker Image
        run: |
          SERVICE_NAME="${{ matrix.service.name }}"
          DOCKERFILE_PATH="${{ matrix.service.dockerfile }}"
          TAG="${{ matrix.service.tag }}"

          echo "Building image for $SERVICE_NAME"
          echo "Using Dockerfile: $DOCKERFILE_PATH"
          echo "Tagging image as: $TAG"

          # Replace these with your own secrets / region
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION="us-west-2"

          # Construct the full ECR image URI
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test-repo:$TAG"

          # Change into the directory where the target repo is checked out
          cd target-repo

          echo "Docker build => $IMAGE_URI"
          docker build -t "$IMAGE_URI" -f "$DOCKERFILE_PATH" .

          echo "Pushing $IMAGE_URI..."
          docker push "$IMAGE_URI"

      - name: Done
        run: echo "All steps completed for this service."

